[0m[[0minfo[0m] [0m[32mFunctionalDataStructure:[0m[0m
[0m[[0minfo[0m] [0m[32mexercise 3.1[0m[0m
[0m[[0minfo[0m] [0m[32m- should Value for list in pattern matching[0m[0m
[0m[[0minfo[0m] [0m[32mexercise 3.2[0m[0m
[0m[[0minfo[0m] [0m[32m- should implement tail function[0m[0m
[0m[[0minfo[0m] [0m[32mexercise 3.3[0m[0m
[0m[[0minfo[0m] [0m[32m- should implement set head function[0m[0m
[0m[[0minfo[0m] [0m[32mexercise 3.4[0m[0m
[0m[[0minfo[0m] [0m[32m- should implement drop function[0m[0m
[0m[[0minfo[0m] [0m[32mexercise 3.5[0m[0m
[0m[[0minfo[0m] [0m[32m- should implement drop while[0m[0m
[0m[[0minfo[0m] [0m[32mexercise 3.6[0m[0m
[0m[[0minfo[0m] [0m[32m- should implement init[0m[0m
[0m[[0minfo[0m] [0m[32mfold right[0m[0m
[0m[[0minfo[0m] [0m[32m- should reduce values to de right[0m[0m
[0m[[0minfo[0m] [0m[32m- should throw stackOverFlowException when the list is too big[0m[0m
[0m[[0minfo[0m] [0m[32mexercise 3.8[0m[0m
[0m[[0minfo[0m] [0m[32m- should pass Nil and cons to foldRight[0m[0m
[0m[[0minfo[0m] [0m[32mexercise 3.9[0m[0m
[0m[[0minfo[0m] [0m[32m- should implement length with fold right[0m[0m
[0m[[0minfo[0m] [0m[32mexercise 3.10[0m[0m
[0m[[0minfo[0m] [0m[32m- should implement fold left tail recursive[0m[0m
[0m[[0minfo[0m] [0m[32mexercise 3.11[0m[0m
[0m[[0minfo[0m] [0m[32m- should implement sum product and length with fold left[0m[0m
[0m[[0minfo[0m] [0m[32mexercise 3.12[0m[0m
[0m[[0minfo[0m] [0m[32m- should implement reverse[0m[0m
[0m[[0minfo[0m] [0m[32mexercise 3.13[0m[0m
[0m[[0minfo[0m] [0m[33m- should implement fold left in terms of fold right !!! IGNORED !!![0m[0m
